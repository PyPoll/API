// Prisma schema for the database
// This file is used to generate the prisma client and the database schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Beta {
    id         Int      @id @default(autoincrement())
    email      String   @unique
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model User {
    id          Int      @id @default(autoincrement())
    email       String?  @unique
    pseudo      String?
    bio         String?
    emailValid  Boolean  @default(false)
    nbFollowers Int      @default(0)
    nbFollowing Int      @default(0)

    // recommendations profile
    reportScore Int    @default(0)
    tagsScores  String @default("{}")

    polls      Poll[]
    followers  Follow[]   @relation("Followers")
    following  Follow[]   @relation("Following")
    reports    PollReports[]
    votes      PollAnswer[]
    views      PollViews[]

    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model Follow {
    followerId Int
    followedId Int

    follower   User @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
    followed   User @relation("Following", fields: [followedId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([followerId, followedId])
}

model Poll {
    id          Int      @id @default(autoincrement())
    title       String
    description String
    type        String
    authorId    Int

    author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    tags        PollTag[]
    medias      Media[]
    answers     Answer[]
    reports     PollReports[]
    votes       PollAnswer[]
    views       PollViews[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Tag {
    id        Int      @id @default(autoincrement())
    name      String   @unique

    // Poll trending score (minus each day, bonus each usage)
    score     Int      @default(1)

    polls       PollTag[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Media {
    id        Int      @id @default(autoincrement())
    pollId    Int
    filename  String

    poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Answer {
    id        Int      @id @default(autoincrement())
    pollId    Int
    label     String
    emoji     String
    nbVotes   Int      @default(0)

    poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
    votes     PollAnswer[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PollTag {
    pollId    Int
    tagId     Int

    poll      Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)
    tag       Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([pollId, tagId])
}

model PollAnswer {
    pollId    Int
    userId    Int
    answerId  Int

    poll      Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
    user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    answer    Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([pollId, userId, answerId])
}

model PollReports {
    pollId    Int
    userId    Int
    reason    String

    poll      Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)
    user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([pollId, userId])
}

model PollViews {
    pollId    Int
    userId    Int
    nbViews   Int

    poll      Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)
    user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([pollId, userId])
}
